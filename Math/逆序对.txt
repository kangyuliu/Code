/*
*利用归并排序求解逆序对问题
*/

int inversePairs(vector<int> & nums){
	if(nums.size() <=1)
		return 0;
	
	int cnt = 0;
	mergeSort(nums, 0, nums.size()-1, cnt);
	return cnt;
}

void mergeSort(vector<int> &nums, int left, int right, int cnt){
	if(left < right){
		int mid = (left+right) /2;
		mergeSort(nums, left, mid, cnt);
		mergeSort(nums, mid+1, right, cnt);
		merge(nums, left, mid, right, cnt);
	}
}

void merge(vector<int> &nums, int left, int mid, int right， int cnt){
	int len = right-left+1;
	vector<int> tmp(len);
	int index = 0;
	int i=left;
	int j=mid+1;
	while(i <=mid && j <= right){
		if(nums[i] < nums[j]){
			tmp[index++] = nums[i++];
		}
		else{
			tmp[index++] = nums[j++];
			cnt += mid-i+1;
		}
	}
	
	while(i <= mid)
		tmp[index++] = nums[i++];
	while(j <= right)
		tmp[index++] = nums[j++];
		
	//copy back
	for(int k=0; k < len; k++)
		nums[left++] = tmp[k];
}