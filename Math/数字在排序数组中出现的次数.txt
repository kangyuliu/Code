/*
*数字在排序数组中出现的次数
*/
//思路:
/*
*二分查找
*/

int  getTimesOfTarget(vector<int> &nums, int target){
	int size = nums.size();
	int cnt = 0;
	if(size <= 0)
		return cnt;
	
	int firstPos = getFitstPos(nums, target);
	int lastPos = getLastPos(nums, target);
	if(firstPos > -1 && lastPos > -1)
		cnt = lastPos - firstPos +1;
		
	return cnt;
}

int getFitstPos(vector<int> &nums, int target){
	int size = nums.size();
	int left = 0;
	int right = size -1;
	while(left < right){
		int mid = (left+right) /2;
		if(nums[mid] < target)
			left = mid + 1;
		else if( target[mid] == target  && (nums[mid-1] != target || mid == 0))
			return mid;
		else
			right = mid-1;
	}
	return -1;
}


int getLastPos(vector<int> &nums, int target){
	int size = nums.size();
	int left = 0;
	int right = size -1;
	while(left < right){
		int mid = (left + right) /2;
		if(nums[mid] > target)
			right = mid-1;
		else if(nums[mid] == target && (nums[mid+1] != target) || mid == size-1)
			return mid;
		else
			left = mid+1;
	}
	return -1;
}