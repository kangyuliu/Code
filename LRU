/*
*System design:LRU cache(least recently used).
*/

#include <iostream>
#include <map>

using namespace std;

/*
*definition of cachelist node, it is double linked list node.
*/

struct CacheNode{
	int key;
	int val;
	CacheNode *pre, *next;
	CacheNode() {}
	CacheNode(int k, int v) : key(k), val(v), pre(NULL), next(NULL){}
	
}

class LRUCache{
private:
	int size;
	CacheNode *head;
	CacheNode *tail;
	map<int, CacheNode*> mp;
	
public:
	LRUCache(int capacity){
		size = capacity;
		head = NULL;
		tail = NULL;
 	}

	int get(int key){
		auto iter = mp.find(key);
		if(iter != mp.end()){
			CacheNode *node = iter->second;
			remove(node);
			setHead(node);
			return node->val;	
		}
		else
			return -1;
	}

	void set(int key, int val){
		auto iter = mp.find(key);
		if(iter != mp.end()){
			CacheNode *node = iter->second;
			node->val = val;
			remove(node);
			setHead(node);
		}
		else{
			CacheNode * newNode = CacheNode(key, val);
			if(mp.size() >= size){
				auto iter = mp.find(tail->key);
				remove(tail);
				mp.erase(iter);
			}
			setHead(newNode);
			mp[key] = newNode;
			
		}
			
	}

	void remove(CacheNode* node){
		if(node->pre != NULL){
			node->pre = node->next;
		}
		else{
			head = node->next;
		}

		if(node->next != NULL){
			node->next->pre = node->pre;
		}
		else{
			tail = node->pre;
		}
	}

	void setHead(CacheNode* node){
		node->next = node;
		node->pre = NULL;
		
		if(head != NULL){
			head->pre = node;
		}
		head = node;
		if(tail == NULL)
			tail = head;
	}
}


