//解决多重背包有两种思路:
/*
*1.多重背包问题类似完全背包问题，仅仅多了一个条件:每种物品的数量是有限,
*所以可以把多重背包问题转换为完全背包问题来解决
*/
int multiPacket(vector<int> &weight, vector<int> &value, vector<int> &num, int limit){
	int n = weight.size();
	vector<vector<int> > dp(n+1, vector<int>(limit+1, 0));
	for(int i=1, i <= n; i++){
		for(int j=1; j<=limit;j++){
			int localMax = min(num[i], j/weight[i-1]);
			for(int k=0; k < localMax; k++){
				if(j >= wight[i-1])
					dp[i][j] = max(dp[i-1][j],dp[i-1][j-k*weight[i-1]]+k*value[i-1]);
				else
					dp[i][j] = dp[i-1][j];
			}
		}
	}
	return dp[n][limit];
}

/*
*2.将多重背包问题转化为0-1背包问题:多重背包问题限定了一种物品的个数，解决多重背包问题，
*只需要把它转化为0-1背包问题即可。比如，有2件价值为5，重量为2的同一物品，我们就可以分为物品a和物品b，a和b的价值都为5，重量都为2，但我们把它们视作不同的物品。
*/

int multiPacket(vector<int> &weight, vector<int> &value, vector<int> &num, int limit){
	int count = 0;
	for(int i=0; i < num.size(); i++){
		count += num[i];
	}
	
	vector<int> localWeight(count, 0);
	vector<int> localValue(count, 0);
	
	int index=0;
	for(int i=0; i < num.size(); i++){
		while(num[i] != 0){
			localWeight[index++] = weight[i];
			localValue[index++] = value[i];
			num[i]--;
		}
	}
	
	return zeroOnePacket(localWeight, localValue, limit);
}