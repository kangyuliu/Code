/*
*约瑟夫环
*/

//version-1
/*
*list
*/
int LastRemaining_Solution(int n, int m)
{
       if(n < 1 || m <1)
           return -1;
       list<int> kids;
       for(int i=0; i < n; i++)
           kids.push_back(i);
        
        auto iter = kids.begin();
        while(kids.size() > 1)
		{
            for(int i=1; i <m; i++)
			{
                iter++;
                if(iter == kids.end())
                    iter = kids.begin();
            }
            iter = kids.erase(iter);
            if(iter == kids.end())
                iter = kids.begin();
        }
        return kids.back();
}

//version-2
/*
*vector
*/
int lastRemaining(int n, int m){
	if(n < 1 || m < 1)
		return -1;
	vector<int> kids(n);
	for(int i=0; i < n; i++)
		kids[i] = i;
	
	auto iter = kids.size();
	while(kids.size() > 1){
		for(int i=1; i <m; i++)
			{
                iter++;
                if(iter == kids.end())
                    iter = kids.begin();
            }
            iter = kids.erase(iter);
            if(iter == kids.end())
                iter = kids.begin();
	}
	return kids[0];
}


//version-3
/*
*非递归
*/
int lastRemaining(int n, int m){
	if(n < 1)
		return -1;
	if(n == 1)
		return 0;
	int last = 0;
	for(int i=2; i <=n; i++)
		last = (lastRemaining(n-1, m)+m) % i;
	
	return last;
}

int lastRemaining(int n, int m){
	if(n < 1)
		return -1;
	if(n == 1)
		return 0;
	
	return (lastRemaining(n-1) + m) % n;
}